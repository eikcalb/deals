{"version":3,"sources":["lib/firebase.ts","lib/util.ts","lib/user.ts","lib/theme.ts","lib/index.ts","components/toolbar.tsx","pages/error.tsx","pages/home.tsx","components/footer.tsx","components/auth.tsx","pages/login.tsx","pages/register.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","analytics","log","console","auth","usersRef","database","ref","vendorsRef","User","userObj","uid","displayName","fUser","isAnonymous","this","email","password","currentUser","signInAnonymously","Error","credential","EmailAuthProvider","linkWithCredential","then","a","usercred","user","updateProfile","child","set","catch","e","delete","error","message","signInWithEmailAndPassword","cred","errorCode","code","Vendor","companyName","Promise","res","rej","once","snapshot","exists","val","signOut","DEFAULT_THEME","main","background","color","height","overflowY","level1","header","footer","padding","fBase","DefaultAppContext","name","description","version","theme","document","title","onAuthStateChanged","undefined","userDetails","login","vendorDetails","register","ApplicationContext","createContext","Toolbar","React","useState","isActive","updateActive","Consumer","ctx","className","style","onClick","isActiveNow","setTimeout","activeClassName","exact","to","signedIn","href","ErrorPage","size","Home","Footer","Date","getFullYear","Login","redirectPath","registerPath","onLogin","isLoading","state","updateState","showPassword","updateShowPassword","redirect","setRedirect","addToast","useToasts","onSubmit","ev","preventDefault","stopPropagation","appearance","autoDismiss","required","value","onChange","target","type","placeholder","tabIndex","disabled","Register","onRegister","vendor","loginPath","passwordVerify","LoginUser","props","loginStudent","LoginVendor","loginVendor","RegisterUser","registerUser","RegisterVendor","registerVendor","App","placement","Provider","basename","strict","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd6ca84e.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nexport const firebaseConfig = {\r\n    apiKey: \"AIzaSyDRlJC_SV_wCL5eTDxVY24e3mHVGFJLNxg\",\r\n    authDomain: \"unidays-3205e.firebaseapp.com\",\r\n    databaseURL: \"https://unidays-3205e.firebaseio.com\",\r\n    projectId: \"unidays-3205e\",\r\n    storageBucket: \"unidays-3205e.appspot.com\",\r\n    messagingSenderId: \"127396561143\",\r\n    appId: \"1:127396561143:web:a032c8f3b20540fc4e53f2\",\r\n    measurementId: \"G-6HPPCPKTZ6\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();","export function log(...args: any[]){\r\n    console.log(...args)\r\n}","import firebase from \"firebase\"\r\nimport { log } from \"./util\"\r\n\r\nexport const auth = firebase.auth()\r\nconst usersRef = firebase.database().ref('users')\r\nconst vendorsRef = firebase.database().ref('vendors')\r\n\r\nexport class User {\r\n    uid: string\r\n    displayName: string\r\n    protected fUser: firebase.User\r\n    readonly isAnonymous: boolean = false\r\n\r\n    constructor(userObj: firebase.User) {\r\n        this.uid = userObj.uid\r\n        this.displayName = userObj.displayName ? userObj.displayName : \"\"\r\n        this.fUser = userObj\r\n        this.isAnonymous = this.fUser.isAnonymous\r\n    }\r\n\r\n    isVendor(): boolean {\r\n        return false\r\n    }\r\n\r\n\r\n    /**\r\n     * All access to app is anonymous by default.\r\n     * \r\n     * Upon registration, the user account is linked to the current aonymous user.\r\n     */\r\n    static async register({ displayName, email, password }: { email: string, password: string, displayName: string }) {\r\n        if (!auth.currentUser) {\r\n            auth.signInAnonymously()\r\n            throw new Error(\"This is weird! Application must start with atleast an anonymous user!\")\r\n        }\r\n\r\n        const credential = firebase.auth.EmailAuthProvider.credential(email, password)\r\n        return auth.currentUser.linkWithCredential(credential).then(async (usercred) => {\r\n            if (!usercred.user) {\r\n                throw new Error(\"User should not be empty!\")\r\n            }\r\n\r\n            const user = usercred.user;\r\n            console.log(\"Anonymous account successfully upgraded\", user);\r\n\r\n            await user.updateProfile({ displayName }).then(() => usersRef.child(user.uid).set({\r\n                displayName,\r\n                email\r\n            })\r\n            ).catch(e => {\r\n                log(e)\r\n                user!.delete()\r\n                throw new Error(\"Could not register user!\")\r\n            })\r\n\r\n            return new User(user)\r\n        }, (error) => {\r\n            console.log('Error upgrading anonymous account', error)\r\n            throw new Error(error.message);\r\n        })\r\n    }\r\n\r\n    static async login(email: string, password: string) {\r\n        return auth.signInWithEmailAndPassword(email, password)\r\n            .then(cred => {\r\n                if (!cred.user) throw new Error(\"User not found!\")\r\n                return new User(cred.user)\r\n            })\r\n            .catch((error) => {\r\n                // Handle Errors here.\r\n                var errorCode = error.code;\r\n\r\n                console.log(error)\r\n                if (errorCode === 'auth/wrong-password') {\r\n                    throw new Error('Wrong password.');\r\n                } else {\r\n                    throw error;\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport class Vendor extends User {\r\n    companyName: string\r\n\r\n    constructor(userObj: firebase.User, companyName: string) {\r\n        super(userObj)\r\n        this.companyName = companyName\r\n    }\r\n\r\n    isVendor() {\r\n        return true\r\n    }\r\n\r\n    /**`\r\n     * Registers a new vendor.\r\n     * \r\n     * Vendor registration is different from user registration and only one account type can be signedin at a time.\r\n     */\r\n    static async register({ companyName, displayName, email, password }: { companyName: string, email: string, password: string, displayName: string }) {\r\n        if (!auth.currentUser) {\r\n            auth.signInAnonymously()\r\n            throw new Error(\"This is weird! Application must start with atleast an anonymous user!\")\r\n        }\r\n\r\n        const credential = firebase.auth.EmailAuthProvider.credential(email, password)\r\n        return auth.currentUser.linkWithCredential(credential).then(async (usercred) => {\r\n            if (!usercred.user) {\r\n                throw new Error(\"User should not be empty!\")\r\n            }\r\n\r\n            const user = usercred.user;\r\n            console.log(\"Anonymous account successfully upgraded\", user);\r\n            await user.updateProfile({ displayName }).then(() => vendorsRef.child(user.uid).set({\r\n                displayName,\r\n                email,\r\n                companyName\r\n            })\r\n            ).catch(e => {\r\n                log(e)\r\n                user!.delete()\r\n                throw new Error(\"Could not register vendor!\")\r\n            })\r\n\r\n            return new Vendor(user, companyName)\r\n        }, (error) => {\r\n            console.log(error)\r\n            throw new Error(\"Error upgrading anonymous account\");\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Login authenticates the current user as a vendor.\r\n     * \r\n     * If the company name of this vendor account is not found an error is thrown.\r\n     * It is an invalid action to create vendors without populating the company name.\r\n     */\r\n    static async login(email: string, password: string) {\r\n        return auth.signInWithEmailAndPassword(email, password)\r\n            .then(async cred => {\r\n                if (!cred.user) throw new Error(\"User not found!\")\r\n\r\n                const companyName: string = await new Promise((res, rej) => {\r\n                    vendorsRef.child(`${cred.user!.uid}/companyName`).once('value', (snapshot) => {\r\n                        if (snapshot.exists()) {\r\n                            return res(snapshot.val())\r\n                        }\r\n                        auth.signOut()\r\n                        throw new Error('Vendor cannot exist without having a company name!')\r\n                    })\r\n                })\r\n                return new Vendor(cred.user, companyName)\r\n            })\r\n            .catch((error) => {\r\n                // Handle Errors here.\r\n                var errorCode = error.code;\r\n\r\n                console.log(error)\r\n                if (errorCode === 'auth/wrong-password') {\r\n                    throw new Error('Wrong password.');\r\n                } else {\r\n                    throw error;\r\n                }\r\n            })\r\n    }\r\n}","export interface Theme {\r\n    /**\r\n     * Main is the lowest level of the screen. This is the reall background of the application.\r\n     */\r\n    main?: React.CSSProperties,\r\n    level1?: React.CSSProperties\r\n    header?: React.CSSProperties\r\n    footer?: React.CSSProperties\r\n}\r\n\r\nexport const DEFAULT_THEME: Theme = {\r\n    main: {\r\n        background: \"#001\",\r\n        color: \"#efefef\",\r\n        height: '100%',\r\n        overflowY: 'scroll'\r\n    },\r\n    level1: {\r\n        background: \"#222\"\r\n    },\r\n    header: {\r\n        background: \"#353545\",\r\n        color: '#fefefe'\r\n    },\r\n    footer: {\r\n        padding: '1em',\r\n        color: '#555'\r\n    }\r\n}","import { createContext } from 'react'\r\nimport * as fBase from './firebase'\r\nimport { User, Vendor, auth } from './user'\r\nimport { log } from './util'\r\nimport { DEFAULT_THEME } from \"./theme\";\r\nimport firebase from 'firebase';\r\n\r\nlog(fBase.firebaseConfig)\r\n\r\nclass AppContext {\r\n    // App datails\r\n    name = \"My Student Deals\"\r\n    description = \"\"\r\n    version = \"0.0.1\"\r\n\r\n    // Theme settings\r\n    theme = DEFAULT_THEME\r\n\r\n    // Instance properties\r\n    //\r\n    // Currently logged in user\r\n    user?: User\r\n\r\n    constructor() {\r\n        document.title = this.name\r\n\r\n        auth.onAuthStateChanged(user => {\r\n            if (user) {\r\n                // If user is anonymous, create a user object to allow saving state once activity is done.\r\n                if (user.isAnonymous) {\r\n                    console.log(\"Anonymous user created\", user)\r\n                    this.user = new User(user)\r\n                }\r\n            }\r\n            else {\r\n                this.user = undefined\r\n                // Signs in current user anonymously\r\n                if (!this.user) auth.signInAnonymously()\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    signedIn() {\r\n        return this.user && !this.user.isAnonymous\r\n    }\r\n\r\n    loginStudent(userDetails: { email: string, password: string }) {\r\n        return User.login(userDetails.email, userDetails.password).then(user => {\r\n            this.user = user\r\n            return this\r\n        })\r\n    }\r\n\r\n    loginVendor(vendorDetails: { email: string, password: string }) {\r\n        return Vendor.login(vendorDetails.email, vendorDetails.password).then(user => {\r\n            this.user = user\r\n            return this\r\n        })\r\n    }\r\n\r\n\r\n    registerUser(userDetails: { displayName: string, email: string, password: string }) {\r\n        return User.register(userDetails).then(user => {\r\n            this.user = user\r\n        })\r\n    }\r\n\r\n    registerVendor(vendorDetails: { displayName: string, email: string, password: string, companyName: string }) {\r\n        return Vendor.register(vendorDetails).then(user => {\r\n            this.user = user\r\n        })\r\n    }\r\n\r\n    logout() {\r\n        if (this.user) auth.signOut()\r\n    }\r\n}\r\n\r\nexport const DefaultAppContext = new AppContext()\r\nexport const ApplicationContext = createContext<AppContext>(DefaultAppContext)\r\n","import React from 'react';\r\nimport { FaHome, FaSignInAlt, FaSign, FaBriefcase, FaWallet, FaSignOutAlt } from \"react-icons/fa\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport { ApplicationContext } from '../lib';\r\n\r\nexport default function Toolbar() {\r\n    let [isActive, updateActive] = React.useState(false)\r\n\r\n    return (\r\n        <ApplicationContext.Consumer>{ctx => (\r\n            <nav className={`navbar is-centered is-unselectable is-fixed-top is-black`} style={ctx.theme.header} >\r\n                <div className=\"navbar-brand\">\r\n                    <span className=\"navbar-item has-text-weight-bold\">{ctx.name}</span>\r\n                    <span onClick={() => {\r\n                        const isActiveNow = !isActive\r\n                        updateActive(isActiveNow)\r\n                        if (isActiveNow === true) {\r\n                            setTimeout(() => updateActive(false), 10000)\r\n                        }\r\n                    }} className={`navbar-burger burger ${isActive ? 'is-active' : ''}`}>\r\n                        <span></span>\r\n                        <span></span>\r\n                        <span></span>\r\n                    </span>\r\n                </div>\r\n                <div className={`navbar-menu${isActive ? 'is-active' : ''}`}>\r\n                    <div className=\"navbar-start\">\r\n                        <NavLink activeClassName='is-active' exact to='/' className='navbar-item'>\r\n                            <FaHome />&emsp;Home\r\n                </NavLink>\r\n                        <NavLink activeClassName='is-active' exact to='/mydeals' className='navbar-item'>\r\n                            <FaWallet />&emsp;My Deals\r\n                </NavLink>\r\n                    </div>\r\n                    <div className=\"navbar-end\">\r\n                        {ctx.signedIn() ?\r\n                            <div className=\"navbar-item\">\r\n                                <p>Hello {ctx.user!.displayName}!</p>\r\n                            </div> : null}\r\n                        <div className=\"navbar-item\">\r\n                            {!ctx.signedIn() ?\r\n                                <div className=\"field is-grouped is-uppercase\">\r\n                                    <p className=\"control\">\r\n                                        <NavLink title='Login to student portal' activeClassName='is-active' exact to='/user/login' className=\"is-primary button\" href=\"\">\r\n                                            <FaSignInAlt />&emsp; Student\r\n                                        </NavLink>\r\n                                    </p>\r\n                                    <p className=\"control\">\r\n                                        <NavLink title=\"Login to vendor portal!\" activeClassName='is-active' exact to='/vendor/login' className=\"is-link button\" href=\"\">\r\n                                            <FaBriefcase />&emsp; Vendor\r\n                                        </NavLink>\r\n                                    </p>\r\n                                </div> :\r\n                                <NavLink title='LogOut' activeClassName='is-active' exact to='/user/logout' className=\"is-danger button\" href=\"\">\r\n                                    <FaSignOutAlt />&emsp; Logout\r\n                            </NavLink>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        )}\r\n        </ApplicationContext.Consumer>\r\n    )\r\n}","import React from \"react\";\r\nimport { FaExclamationTriangle, FaGithub } from \"react-icons/fa\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Toolbar from \"../components/toolbar\";\r\nimport { ApplicationContext } from \"../lib\";\r\nimport { Footer } from \"../components/footer\";\r\n\r\nexport function ErrorPage() {\r\n    return (\r\n        <ApplicationContext.Consumer>{(ctx) => {\r\n            return (\r\n                <div style={ctx.theme.main}>\r\n                    <Toolbar />\r\n                    <div className='hero is-black is-bold is-fullheight'>\r\n                        <div className='hero-body'>\r\n                            <div className='container notification has-text-centered' style={ctx.theme.level1}>\r\n                                <FaExclamationTriangle size={50} className=\"has-text-warning\" />\r\n                                <p className='title is-uppercase'> Page Not Found!</p>\r\n                                <br />\r\n                                <br />\r\n                                <NavLink to='/' className='button is-danger is-outlined'>Go to Homepage!</NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }}\r\n        </ApplicationContext.Consumer>\r\n    )\r\n}","import React from 'react'\r\nimport { ApplicationContext } from '../lib'\r\nimport Toolbar from '../components/toolbar'\r\nimport { Footer } from '../components/footer'\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <ApplicationContext.Consumer>{(ctx) => {\r\n            return (\r\n                <div style={ctx.theme.main}>\r\n                    <Toolbar />\r\n                    <div className='hero is-medium is-light is-bold'>\r\n                        <div className='hero-body'>\r\n                            <div className='container'>\r\n                                <p className='title'>Welcome to {ctx.name}!</p>\r\n                                <p className='subtitle'>{ctx.description}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }}\r\n        </ApplicationContext.Consumer>\r\n    )\r\n}","import React from \"react\";\r\nimport { ApplicationContext } from \"../lib\";\r\n\r\nexport const Footer = () => (\r\n    <ApplicationContext.Consumer>{ctx => (\r\n        <footer className='footer' style={ctx.theme.footer}>\r\n            <div className=\"content has-text-centered\">\r\n                <p>Copyright &copy; {ctx.name} {new Date().getFullYear()} </p>\r\n            </div>\r\n        </footer>\r\n    )}\r\n    </ApplicationContext.Consumer>\r\n)","import React from 'react'\r\nimport { ApplicationContext } from '../lib'\r\nimport Toolbar from '../components/toolbar'\r\nimport { Footer } from '../components/footer'\r\nimport { FaEnvelope, FaExclamationCircle, FaEyeSlash, FaEye, FaKey, FaUser, FaBriefcase } from 'react-icons/fa'\r\nimport { NavLink, Redirect } from 'react-router-dom'\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\nexport const Login = ({ redirectPath, registerPath, onLogin }: { onLogin: (a) => Promise<any>, redirectPath: string, registerPath: string }) => {\r\n    const [state, updateState] = React.useState({ error: null, email: \"\", password: \"\", isLoading: false })\r\n    const [showPassword, updateShowPassword] = React.useState(false)\r\n    const [redirect, setRedirect] = React.useState(false)\r\n    const { addToast } = useToasts()\r\n\r\n    return (\r\n        <ApplicationContext.Consumer>{(ctx) => {\r\n            return (\r\n                <form onSubmit={(ev) => {\r\n                    ev.preventDefault(); ev.stopPropagation();\r\n                    updateState({ ...state, isLoading: true })\r\n\r\n                    onLogin(state).then(() => {\r\n                        console.log('login success')\r\n                        addToast('Login Success!', { appearance: 'success', autoDismiss: true })\r\n                        updateState({ ...state, isLoading: false })\r\n\r\n                        return setRedirect(true)\r\n                    })\r\n                        .catch(e => {\r\n                            updateState({ ...state, isLoading: false, error: e.message })\r\n                        })\r\n                }}>\r\n                    {redirect ? <Redirect to={redirectPath} /> : null}\r\n                    <div className=\"card\">\r\n                        <section className=\"card-content\">\r\n                            {state.error ?\r\n                                <div className='notification is-warning'>\r\n                                    <FaExclamationCircle /> {state.error}\r\n                                </div>\r\n                                : null}\r\n\r\n                            <div className='field is-horizontal'>\r\n                                <div className=\"field-label\">\r\n                                    <label className=\"label\">Email</label>\r\n                                </div>\r\n                                <div className='field-body'>\r\n                                    <div className=\"field\">\r\n                                        <div className=\"control has-icons-left\">\r\n                                            <input required name='email' value={state.email} onChange={(ev) => updateState({ ...state, email: ev.target.value })} className=\"input\" type=\"email\" placeholder=\"Enter email address\" />\r\n                                            <span className=\"icon is-small is-left\">\r\n                                                <FaEnvelope />\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className='field is-horizontal'>\r\n                                <div className=\"field-label\">\r\n                                    <label className=\"label\">Password</label>\r\n                                </div>\r\n                                <div className='field-body'>\r\n                                    <div className=\"field has-addons\">\r\n                                        <p className=\"control is-expanded\">\r\n                                            <input required name='password' value={state.password} onChange={(ev) => updateState({ ...state, password: ev.target.value })} className=\"input\" type={showPassword ? 'text' : 'password'} />\r\n                                        </p>\r\n                                        <p className=\"control\">\r\n                                            <button tabIndex={-1} type='button' className=\"button\" onClick={() => updateShowPassword(!showPassword)}>{showPassword ? <FaEyeSlash /> : <FaEye />}</button>\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className='field'>\r\n                                <div className='control'>\r\n                                    <button type='submit' className={`is-success button ${state.isLoading ? 'is-loading' : ''}`} disabled={state.isLoading}>Login</button>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </section>\r\n\r\n                        <footer className=\"card-footer is-unselectable\">\r\n                            <NavLink to={registerPath} exact className=\"card-footer-item\">Create New Account</NavLink>\r\n                        </footer>\r\n                    </div>\r\n                </form>\r\n            )\r\n        }}\r\n        </ApplicationContext.Consumer>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport const Register = ({ redirectPath, onRegister, vendor, loginPath }: { loginPath: string, vendor?: boolean, onRegister: (a) => Promise<any>, redirectPath: string }) => {\r\n    const [state, updateState] = React.useState({ error: '', email: \"\", password: \"\", passwordVerify: '', isLoading: false, showPassword: false, displayName: '', companyName: '' })\r\n    const { addToast } = useToasts()\r\n    const [redirect, setRedirect] = React.useState(false)\r\n\r\n\r\n    return (\r\n        <ApplicationContext.Consumer>{(ctx) => {\r\n            return (\r\n                <form onSubmit={(ev) => {\r\n                    ev.preventDefault(); ev.stopPropagation();\r\n\r\n                    if (state.password !== state.passwordVerify) return updateState({ ...state, error: 'Passwords do not match!' })\r\n\r\n                    updateState({ ...state, isLoading: true })\r\n\r\n                    onRegister(state).then(() => {\r\n                        addToast('Registration Success!', { appearance: 'success', autoDismiss: true })\r\n                        updateState({ ...state, isLoading: false })\r\n                        return setRedirect(true)\r\n                    })\r\n                        .catch(e => {\r\n                            updateState({ ...state, isLoading: false, error: e.message })\r\n                        })\r\n                }}>\r\n                    {redirect ? <Redirect to={redirectPath} /> : null}\r\n\r\n                    <div className=\"card\">\r\n                        <section className=\"card-content\">\r\n                            {state.error ?\r\n                                <div className='notification is-warning'>\r\n                                    <FaExclamationCircle /> {state.error}\r\n                                </div>\r\n                                : null}\r\n\r\n                            {vendor ?\r\n                                <div className='field is-horizontal'>\r\n                                    <div className=\"field-label\">\r\n                                        <label className=\"label\">Company Name</label>\r\n                                    </div>\r\n                                    <div className='field-body'>\r\n                                        <div className=\"field\">\r\n                                            <div className=\"control has-icons-left\">\r\n                                                <input required name='companyname' value={state.companyName} onChange={(ev) => updateState({ ...state, companyName: ev.target.value })} className=\"input\" type=\"text\" placeholder=\"Enter company name\" />\r\n                                                <span className=\"icon is-small is-left\">\r\n                                                    <FaBriefcase />\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div> : null}\r\n\r\n                            <div className='field is-horizontal'>\r\n                                <div className=\"field-label\">\r\n                                    <label className=\"label\">Name</label>\r\n                                </div>\r\n                                <div className='field-body'>\r\n                                    <div className=\"field\">\r\n                                        <div className=\"control has-icons-left\">\r\n                                            <input required name='name' value={state.displayName} onChange={(ev) => updateState({ ...state, displayName: ev.target.value })} className=\"input\" type=\"person\" placeholder=\"Enter your fullname\" />\r\n                                            <span className=\"icon is-small is-left\">\r\n                                                <FaUser />\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className='field is-horizontal'>\r\n                                <div className=\"field-label\">\r\n                                    <label className=\"label\">Email</label>\r\n                                </div>\r\n                                <div className='field-body'>\r\n                                    <div className=\"field\">\r\n                                        <div className=\"control has-icons-left\">\r\n                                            <input required name='email' value={state.email} onChange={(ev) => updateState({ ...state, email: ev.target.value })} className=\"input\" type=\"email\" placeholder=\"Enter email address\" />\r\n                                            <span className=\"icon is-small is-left\">\r\n                                                <FaEnvelope />\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className='field is-horizontal'>\r\n                                <div className=\"field-label\">\r\n                                    <label className=\"label\">Password</label>\r\n                                </div>\r\n                                <div className='field-body'>\r\n                                    <div className=\"field has-addons\">\r\n                                        <p className=\"control is-expanded has-icons-left\">\r\n                                            <input required name='password' value={state.password} onChange={(ev) => updateState({ ...state, password: ev.target.value })} className=\"input\" type={state.showPassword ? 'text' : 'password'} />\r\n                                            <span className=\"icon is-small is-left\">\r\n                                                <FaKey />\r\n                                            </span>\r\n                                        </p>\r\n                                        <p className=\"control\">\r\n                                            <button disabled={state.isLoading} tabIndex={-1} className=\"button\" type=\"button\" onClick={() => updateState({ ...state, showPassword: !state.showPassword })}>{state.showPassword ? <FaEyeSlash /> : <FaEye />}</button>\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className='field is-horizontal'>\r\n                                <div className=\"field-label\">\r\n                                    <label className=\"label\">Confirm Password</label>\r\n                                </div>\r\n                                <div className='field-body'>\r\n\r\n                                    <div className='field'>\r\n                                        <p className=\"control has-icons-left\">\r\n                                            <input required name='password' value={state.passwordVerify} onChange={(ev) => updateState({ ...state, passwordVerify: ev.target.value })} className=\"input\" type={state.showPassword ? 'text' : 'password'} />\r\n                                            <span className=\"icon is-small is-left\">\r\n                                                <FaKey />\r\n                                            </span>\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className='field'>\r\n                                <div className='control'>\r\n                                    <button type='submit' className={`is-success button ${state.isLoading ? 'is-loading' : ''}`} disabled={state.isLoading}>Join</button>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </section>\r\n\r\n                        <footer className=\"card-footer\">\r\n                            <NavLink to={loginPath} exact className=\"card-footer-item\">Login with existing account</NavLink>\r\n                        </footer>\r\n                    </div>\r\n                </form>\r\n            )\r\n        }}\r\n        </ApplicationContext.Consumer>\r\n    )\r\n}","import React from 'react'\r\nimport { ApplicationContext } from '../lib'\r\nimport Toolbar from '../components/toolbar'\r\nimport { Footer } from '../components/footer'\r\nimport { Login } from '../components/auth'\r\n\r\nexport const LoginUser = () => {\r\n    return (\r\n        <ApplicationContext.Consumer>{(ctx) => {\r\n            console.log(ctx)\r\n            return (\r\n                <div style={ctx.theme.main}>\r\n                    <Toolbar />\r\n                    <div className='section container'>\r\n                        <h2 className='is-title is-size-2 has-text-centered'>Login with username and password</h2>\r\n\r\n                        <div className='section'>\r\n                            <Login onLogin={(props) => {\r\n                                return ctx.loginStudent(props)\r\n                            }} redirectPath=\"/\" registerPath={'/user/register'} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }}\r\n        </ApplicationContext.Consumer>\r\n    )\r\n}\r\n\r\nexport const LoginVendor = () => {\r\n    return (\r\n        <ApplicationContext.Consumer>{(ctx) => {\r\n            return (\r\n                <div style={ctx.theme.main}>\r\n                    <Toolbar />\r\n                    <div className='section container'>\r\n                        <h2 className='is-title is-size-2 has-text-centered'>Login with username and password</h2>\r\n\r\n                        <div className='section'>\r\n                            <Login onLogin={props => ctx.loginVendor(props)} redirectPath=\"/\" registerPath={'/vendor/register'} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }}\r\n        </ApplicationContext.Consumer>\r\n    )\r\n}","import React from 'react'\r\nimport { ApplicationContext } from '../lib'\r\nimport Toolbar from '../components/toolbar'\r\nimport { Footer } from '../components/footer'\r\nimport { Login, Register } from '../components/auth'\r\n\r\nexport const RegisterUser = () => {\r\n    return (\r\n        <ApplicationContext.Consumer>{(ctx) => {\r\n            return (\r\n                <div style={ctx.theme.main}>\r\n                    <Toolbar />\r\n                    <div className='section container'>\r\n                        <h2 className='is-title is-size-2 has-text-centered'>Login with username and password</h2>\r\n\r\n                        <div className='section'>\r\n                            <Register onRegister={props => ctx.registerUser(props)} redirectPath=\"/\" loginPath={'/user/login'} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }}\r\n        </ApplicationContext.Consumer>\r\n    )\r\n}\r\n\r\nexport const RegisterVendor = () => {\r\n    return (\r\n        <ApplicationContext.Consumer>{(ctx) => {\r\n            return (\r\n                <div style={ctx.theme.main}>\r\n                    <Toolbar />\r\n                    <div className='section container'>\r\n                        <h2 className='is-title is-size-2 has-text-centered'>Login with username and password</h2>\r\n\r\n                        <div className='section'>\r\n                            <Register vendor onRegister={props => ctx.registerVendor(props)} redirectPath=\"/\" loginPath={'/vendor/login'} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }}\r\n        </ApplicationContext.Consumer>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { ApplicationContext, DefaultAppContext } from './lib';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { ToastProvider } from \"react-toast-notifications\";\nimport { ErrorPage } from './pages/error';\nimport { Home } from './pages/home';\nimport { Footer } from './components/footer';\nimport { auth } from './lib/user';\nimport { LoginUser, LoginVendor } from './pages/login';\nimport { RegisterVendor, RegisterUser } from './pages/register';\n\n\nconst App: React.FC = () => {\n  return (\n    <ToastProvider placement={'bottom-center'}>\n\n      <ApplicationContext.Provider value={DefaultAppContext}  >\n        <ApplicationContext.Consumer>{ctx => (\n          <BrowserRouter basename='/deals'>\n            <Switch>\n              <Route strict exact path=\"/vendor/register\" component={RegisterVendor} />\n              <Route strict exact path=\"/user/register\" component={RegisterUser} />\n              <Route strict exact path=\"/vendor/login\" component={LoginVendor} />\n              <Route strict exact path=\"/user/login\" component={LoginUser} />\n              <Route strict exact path=\"/\" component={Home} />\n              <Route component={ErrorPage} />\n            </Switch>\n            <Footer />\n          </BrowserRouter>\n        )}</ApplicationContext.Consumer>\n      </ApplicationContext.Provider>\n    </ToastProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}